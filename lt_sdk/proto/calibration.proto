syntax = "proto3";
package light;

import "lt_sdk/proto/lgf.proto";
import "lt_sdk/proto/common.proto";
import "lt_sdk/proto/dtypes.proto";

message CalibrationHistogram {
  // hist stores counts, bin edges can be computed from histogram max value and
  // number of bins. Same convention as np.histogram, all but the last bin are
  // half open Example: hist = [2, 3], bin_edges = [0, 1, 2]
  //          2 values in range [0, 1)
  //          3 values in range [1, 2]
  repeated int32 hist = 1;

  enum ValueType {
    // Max value of the histogram. The histogram is uniquely determined by its
    // max value and an array of counts (assuming it is symmetric).
    HISTOGRAM_MAX = 0;

    // Number of zeros from the distribution (the set of values used to created
    // the histogram). By default true zeros in the distribution are not
    // included in the counts of the histogram.
    NUM_ZEROS = 1;

    // Maximum value of the distribution (the set of values used to created the
    // histogram). The maximum value in the distribution may not be included
    // in the counts if distribution max is greater than histogram max.
    DISTRIBUTION_MAX = 2;
  }
  repeated float value = 4;  // Uses ValueType as index into array
}

message ScaleInfo {
  float scale = 1;
  float bias = 2;
}

message ScaleInfoList {
  repeated ScaleInfo l = 1;
}

message NodeInfo {
  string node_name = 1;
  int32 quant_precision = 2;
}

message NodeScalePair {
  NodeInfo node_info = 1;

  oneof scale_option {
    ScaleInfo scale_info = 2;
    ScaleInfoList scale_info_list = 3;
  }
}

message QuantScalesData {
  // Map of EdgeInfo to quantization scale
  repeated NodeScalePair data = 1;
}

message SimpleMap {
  // Simple map used to pass data between cpp and python
  map<int32, float> simple_map = 1;
}

message ScaleInfoMap {
  // Map for quantization scales
  map<int32, ScaleInfo> scale_info_map = 1;
}

enum HistogramMode {
  HM_INVALID = 0;
  HM_UPDATE_MAX = 1;
  HM_POPULATE_HIST = 2;
  HM_PADDING = 3;
}
